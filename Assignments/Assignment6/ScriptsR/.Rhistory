print("shit")
print("Assignment 6 - Schmitt Schowing")
packages.install("samr")
install.packages("samr")
mydata = read.table('ms_data.txt')
mydata = read.table('./ms_data.txt')
mydata = read.table('./ms_data.txt')
mydata = read.table('./ms_data.txt', sep = '\t')
mydata
mydata[1]
mydata[0]
dim(mydata)
mydata[1:]
mydata[1]
mydata[:][1]
mydata[1,1]
mydata[1,1][1]
View(mydata)
data_transformed
mydata.transformed
print("Assignment 6 - Schmitt Schowing")
install.packages("samr")
mydata = read.table('./ms_data.txt', sep = '\t')
library("samr")
mydata = read.table('./ms_data.txt', sep = '\t')
dim(mydata)
mydata.transformed <- mydata
mydata.transformed[, 1:9] <- log(d[1:9], 2)
mydata.transformed[, 1:9] <- log(mydata[1:9], 2)
mydata.transformed[1::, 1:9] <- log(mydata[1:9], 2)
mydata.transformed[1:, 1:9] <- log(mydata[1:9], 2)
type(mydata)
mydata
clear
typeof(mydata)
mydata[1:]
mydata[1:,]
mydata[1:,1:9]
mydata[,1:9]
mydata = read.table('./ms_data.txt', sep = '\t')
mydata <- data.frame(mydata)
dim(mydata)
mydata.transformed <- mydata
mydata.transformed[, 1:9] <- log(mydata[1:9], 2)
mydata = read.table('./ms_data.txt', sep = '\t')
mydata <- as.data.frame(mydata)
mydata <- as.data.frame(mydata, row.names = mydata[1,])
mydata <- as.data.frame(mydata, col.names = mydata[1,])
dim(mydata)
mydata.transformed <- mydata
mydata.transformed[, 1:9] <- log(mydata[1:9], 2)
mydata
mydata[1,]
mydata[, 1:9]
mydata <- as.data.frame(mydata, col.names = mydata[1,], cut.names = TRUE)
dim(mydata)
mydata.transformed <- mydata
mydata.transformed[, 1:9] <- log(mydata[1:9], 2)
mydata.transformed <- mydata[2:]
mydata.transformed[, 1:9] <- log(mydata[1:9], 2)
mydata.transformed <- mydata[2:,]
mydata.transformed <- mydata[2:,1:9]
mydata.transformed <- mydata[2:][1:9]
mydata = read.csv('./ms_data.txt', sep = '\t')
mydata <- as.data.frame(mydata, col.names = mydata[1,], cut.names = TRUE)
dim(mydata)
mydata.transformed <- mydata[2:][1:9]
mydata
mydata.transformed <- mydata
mydata.transformed[, 1:9] <- log(mydata[1:9], 2)
mydata.transformed
mydata.transformed
write.table(mydata.transformed, file = "./logtransformed.txt")
install.packages("preprocesscore")
dim.data.frame(df)
names(df)
df <- as.data.frame(mydata, col.names = mydata[1,], cut.names = FALSE)
dim(df)
names(df)
df.transformed <- df
df.transformed[, 1:9] <- log(df[1:9], 2)
str(df)
library("preprocesscore")
df.quantile_normalized <-df.transformed
df.quantile_normalized[,1:9] <- normalize.quantiles(df.quantile_normalized[,1:9],copy=TRUE)
install.packages("preprocessCore")
source('C:/Users/thsch/Desktop/Bioinformatics3/Assignments/Assignment6/ScriptsR/Assignment6Part2_schmitt_schowing.R', echo=TRUE)
df.quantile_normalized <-df.transformed
df.transformed
df.quantile_normalized[,1:9]
df.transformed[1:9]
df.quantile_normalized[,1:9] <- quantile_normalisation(df.df.transformed[,1:9],copy=TRUE)
quantile_normalisation <- function(df){
df_rank <- apply(df,2,rank,ties.method="min")
df_sorted <- data.frame(apply(df, 2, sort))
df_mean <- apply(df_sorted, 1, mean)
index_to_mean <- function(my_index, my_mean){
return(my_mean[my_index])
}
df_final <- apply(df_rank, 2, index_to_mean, my_mean=df_mean)
rownames(df_final) <- rownames(df)
return(df_final)
}
mydata = read.csv('./ms_data.txt', sep = '\t')
df <- as.data.frame(mydata, col.names = mydata[1,], cut.names = FALSE)
dim(df)
names(df)
str(df)
df.transformed <- df
df.transformed[, 1:9] <- log(df[1:9], 2)
df.quantile_normalized <-df.transformed
df.quantile_normalized[,1:9] <- quantile_normalisation(df.df.transformed[,1:9],copy=TRUE)
df.quantile_normalized[,1:9] <- quantile_normalisation(df.df.transformed[,1:9])
df.quantile_normalized[,1:9] <- quantile_normalisation(df.transformed[,1:9])
df.quantile_normalized[,1:9]
df.transformed[, 1:9]
rownames(df)
source("https://bioconductor.org/biocLite.R")
biocLite("preprocessCore")
df.quantile_normalized[,1:9] <- normalize.quantiles(df.transformed[,1:9])
library(preprocessCore)
df.quantile_normalized[,1:9] <- normalize.quantiles(df.transformed[,1:9])
x = df.transformed[,1:9]
x
x <- normalize.quantiles(x)
x = data.matrix(df.transformed[,1:9])
x <- normalize.quantiles(x)
df.quantile_normalized[,1:9] <- x
df.quantile_normalized[,1:9]
head(x)
head(df.transformed)
x <- df.quantile_normalized[,1:9]
df.analysis <- SAM(x,y=NULL,censoring.status=NULL,
resp.type=c("Quantitative","Two class unpaired","Survival","Multiclass",
"One class", "Two class paired","Two class unpaired timecourse",
"One class timecourse","Two class paired timecourse", "Pattern discovery"),
geneid = NULL,
genenames = NULL,
s0=NULL,
s0.perc=NULL,
nperms=100,
center.arrays=FALSE,
testStatistic=c("standard","wilcoxon"),
time.summary.type=c("slope","signed.area"),
regression.method=c("standard","ranks"),
return.x=TRUE,
knn.neighbors=10,
random.seed=NULL,
logged2 = FALSE,
fdr.output = 0.20,
eigengene.number = 1)
library("samr")
df.analysis <- SAM(x,y=NULL,censoring.status=NULL,
resp.type=c("Quantitative","Two class unpaired","Survival","Multiclass",
"One class", "Two class paired","Two class unpaired timecourse",
"One class timecourse","Two class paired timecourse", "Pattern discovery"),
geneid = NULL,
genenames = NULL,
s0=NULL,
s0.perc=NULL,
nperms=100,
center.arrays=FALSE,
testStatistic=c("standard","wilcoxon"),
time.summary.type=c("slope","signed.area"),
regression.method=c("standard","ranks"),
return.x=TRUE,
knn.neighbors=10,
random.seed=NULL,
logged2 = FALSE,
fdr.output = 0.20,
eigengene.number = 1)
df.analysis <- sam(x,y=NULL,censoring.status=NULL,
resp.type=c("Quantitative","Two class unpaired","Survival","Multiclass",
"One class", "Two class paired","Two class unpaired timecourse",
"One class timecourse","Two class paired timecourse", "Pattern discovery"),
geneid = NULL,
genenames = NULL,
s0=NULL,
s0.perc=NULL,
nperms=100,
center.arrays=FALSE,
testStatistic=c("standard","wilcoxon"),
time.summary.type=c("slope","signed.area"),
regression.method=c("standard","ranks"),
return.x=TRUE,
knn.neighbors=10,
random.seed=NULL,
logged2 = FALSE,
fdr.output = 0.20,
eigengene.number = 1)
library("samr")
library(preprocessCore)
mydata = read.csv('./ms_data.txt', sep = '\t')
df <- as.data.frame(mydata, col.names = mydata[1,], cut.names = FALSE)
df.transformed <- df
df.transformed[, 1:9] <- log(df[1:9], 2)
df.quantile_normalized <-df.transformed
x = data.matrix(df.transformed[,1:9])
x <- normalize.quantiles(x)
df.quantile_normalized[,1:9] <- x
x <- df.quantile_normalized[,1:9]
install.packages("inpute")
library("samr")
install.packages("samr")
install.packages("samr")
install.packages("inpute")
packageurl <- "http://cran.r-project.org/bin/macosx/mavericks/contrib/3.1/fields_7.1.tgz"
library(devtools)
packages.install(devtools)
source("https://bioconductor.org/biocLite.R")
biocLite("preprocessCore")
print("Assignment 6 - Schmitt Schowing")
install.packages("samr")
install.packages("samr")
install.packages("samr")
